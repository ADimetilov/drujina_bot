from aiogram import Router,F,Bot
from aiogram.types import Message,CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from inline_kbs import *
import db_class
router = Router()
db = db_class.DataBase("drujina.db")
@router.message(Command("start"))
async def start_handler(msg:Message):
    if not db.search(msg.from_user.id):
        db.newuser(msg.from_user.id)
    await msg.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?üëã",reply_markup=get_inline_kb())


class Form(StatesGroup):
    FIO = State()
    Collage = State()
    group = State()
    adres = State()
    typewarn = State()

@router.message(Form.adres)
async def get_type(msg:Message, state:FSMContext):
    await state.update_data(adres=msg.text)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è (–ù–∞—Ä–∫–æ—Ç–∏–∫–∏,–û—Ä—É–∂–∏–µ,–ö–∞–∑–∏–Ω–æ –∏ —Ç.–ø.):",reply_markup=cancel())
    await state.set_state(Form.typewarn)
    
@router.message(Form.typewarn)
async def commit(msg:Message,state:FSMContext,bot:Bot):
    await state.update_data(typewarn = msg.text)
    id = msg.from_user.id
    data = await state.get_data()
    await bot.send_message(-1002321664383,f"<b>–°—Å—ã–ª–∫–∞:</b> {data['adres']}\n<b>–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> {data['typewarn']}\n<b>–§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: </b>{db.get_fio(id)}\n<b>–ö–æ–ª–ª–µ–¥–∂:</b> {db.get_collage(id)}\n<b>–ì—Ä—É–ø–ø–∞:</b> {db.get_group(id)}",reply_markup=ban(msg.from_user.id))
    await msg.answer("–ù–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é‚ù§Ô∏è",reply_markup=get_inline_kb())
    await state.clear()

async def check(id):
    if db.select_group(id) == True and db.select_fio(id) == True and db.select_collage(id) ==  True:
        return True
    else:
        return False

@router.message(Form.FIO)
async def insert_fio(msg:Message, state: FSMContext):
    db.fio_user(msg.text,msg.from_user.id)
    state.clear()
    if await check(msg.from_user.id):
         await msg.answer("–§–ò–û –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ä–∞–∑—Ä–µ—à–µ–Ω‚úÖ",reply_markup=get_inline_kb())
         return None
    await msg.answer("–§–ò–û –¥–æ–±–∞–≤–ª–µ–Ω–æ‚úÖ",reply_markup=root_inline_kb(db,msg.from_user.id))

@router.message(Form.Collage)
async def insert_collage(msg:Message, state: FSMContext):
    db.collage_user(msg.text,msg.from_user.id)
    state.clear()
    if await check(msg.from_user.id):
         await msg.answer("–ö–æ–ª–ª–µ–¥–∂ –¥–æ–±–∞–≤–ª–µ–Ω, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ä–∞–∑—Ä–µ—à–µ–Ω‚úÖ",reply_markup=get_inline_kb())
         return None
    await msg.answer("–ö–æ–ª–ª–µ–¥–∂ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ",reply_markup=root_inline_kb(db,msg.from_user.id))

@router.message(Form.group)
async def insert_group(msg:Message, state: FSMContext):
    db.group_user(msg.text,msg.from_user.id)
    state.clear()
    if await check(msg.from_user.id):
         await msg.answer("–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ä–∞–∑—Ä–µ—à–µ–Ω‚úÖ",reply_markup=get_inline_kb())
         return None
    await msg.answer("–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ",reply_markup=root_inline_kb(db,msg.from_user.id))

@router.callback_query() 
async def check_button(call:CallbackQuery,state: FSMContext,bot:Bot): 
    if call.data == "get_warn": 
        id = call.from_user.id
        if db.select_group(id) == False or db.select_fio(id) == False or db.select_collage(id) ==  False:
            print(str(db.select_group(id)))
            print(str(db.select_fio(id)))
            print(str(db.select_collage(id)))
            rules_insert =  "–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ: "
            if not db.select_collage(id):
                rules_insert += "<b>–ö–æ–ª–ª–µ–¥–∂–µ</b> "
            if not db.select_fio(id):
                rules_insert += "<b>–§–ò–û</b> "
            if not db.select_group(id):
                rules_insert += "<b>–ì—Ä—É–ø–ø–µ</b> "
            await call.message.answer(rules_insert, reply_markup=root_inline_kb(db,id))
            return None
        else:
            if db.isblock(id):
                await call.message.answer("–î–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω –ö–∏–±–µ—Ä–î—Ä—É–∂–∏–Ω–æ–π", reply_markup=callunban())
                return None
            await call.message.answer("–•–æ—Ä–æ—à–æ, –≤—ã—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", reply_markup=cancel()) 
            await state.set_state(Form.adres)
    if call.data == "set_fio":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û‚úèÔ∏è")
        await state.set_state(Form.FIO)
    if call.data == "rules":
        await call.message.answer("<b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n1. –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  –∫–æ—Ç–æ—Ä–∞—è –æ—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è\n2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ –æ–¥–Ω–æ–π —Ç–µ–º–µ\n3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞ –Ω–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é\n\n<b>–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∏–∑  –ø—É–Ω–∫—Ç–∞ –ø—Ä–∞–≤–∏–ª, —É—á–∞—Å—Ç–Ω–∏–∫ –¥—Ä—É–∂–∏–Ω—ã –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–¥–∞—Ç—å –≤–∞–º –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.</b>\n\n–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å 1 —Ä–∞–∑ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n(–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
    if call.data == "query_unban":
        id = call.from_user.id
        if db.isquery(call.from_user.id):
            await call.message.answer("–ó–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await call.message.answer("<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –¥—Ä—É–∂–∏–Ω–µ üèπ \n–ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ üì•</b>")
            db.insert_unban(id)
            await bot.send_message(-1002321664383,f"–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É:\n<b>–§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: </b>{db.get_fio(id)}\n<b>–ö–æ–ª–ª–µ–¥–∂:</b> {db.get_collage(id)}\n<b>–ì—Ä—É–ø–ø–∞:</b> {db.get_group(id)}",reply_markup=unban(id))
    if call.data == "cancel":
        await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ‚ùå")
        await call.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",reply_markup=get_inline_kb())
        await state.clear()
    if call.data == "set_collage":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–ª–ª–µ–¥–∂üèò")
        await state.set_state(Form.Collage)
    if call.data == "set_group":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—Éüë•")
        await state.set_state(Form.group)
    if db.search(call.data):
        if db.isquery(call.data) and db.isblock(call.data):
            db.unban(call.data)
            await call.message.answer("<b>–£—Å–ø–µ—à–Ω–æ!–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ωüîì</b>")
            await bot.send_message(call.data,"<b>–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω‚úÖ</b>",reply_markup=get_inline_kb())
            return None
        db.block(call.data)
        await call.message.answer("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ωüîí</b>")
    await call.answer()
